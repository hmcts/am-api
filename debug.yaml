REVISION: 1
RELEASED: Mon Jan 28 14:32:32 2019
CHART: am-api-0.0.1
USER-SUPPLIED VALUES:
am-api:
  applicationPort: 2703
  image: hmcts.azurecr.io/hmcts/am-api@sha256:5d1580b6115289de6834a81cd3ae482be06a87e6895f1492f3078c43f4ecb446
  ingressHost: am-api-pr-11.service.core-compute-preview.internal
global:
  environment: aat
  subscriptionId: 1c4f0704-a29e-403d-b719-b90c34ef14c9
  tenantId: 531ff96d-0ae9-462a-8d2d-bec7c0b42082

COMPUTED VALUES:
am-api:
  applicationPort: 2703
  cpuLimits: 2500m
  cpuRequests: 100m
  global:
    environment: aat
    subscriptionId: 1c4f0704-a29e-403d-b719-b90c34ef14c9
    tenantId: 531ff96d-0ae9-462a-8d2d-bec7c0b42082
  image: hmcts.azurecr.io/hmcts/am-api@sha256:5d1580b6115289de6834a81cd3ae482be06a87e6895f1492f3078c43f4ecb446
  ingressHost: am-api-pr-11.service.core-compute-preview.internal
  livenessDelay: 30
  livenessFailureThreshold: 3
  livenessPath: /health
  livenessPeriod: 15
  livenessTimeout: 3
  memoryLimits: 1024Mi
  memoryRequests: 512Mi
  readinessDelay: 30
  readinessPath: /health
  readinessPeriod: 15
  readinessTimeout: 3
global:
  environment: aat
  subscriptionId: 1c4f0704-a29e-403d-b719-b90c34ef14c9
  tenantId: 531ff96d-0ae9-462a-8d2d-bec7c0b42082
postgresql:
  extraEnv: {}
  global:
    environment: aat
    subscriptionId: 1c4f0704-a29e-403d-b719-b90c34ef14c9
    tenantId: 531ff96d-0ae9-462a-8d2d-bec7c0b42082
  image:
    debug: false
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/postgresql
    tag: 10.6.0
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  master:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  metrics:
    enabled: false
    image:
      pullPolicy: IfNotPresent
      registry: docker.io
      repository: wrouesnel/postgres_exporter
      tag: v0.4.6
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    service:
      annotations:
        prometheus.io/port: "9187"
        prometheus.io/scrape: "true"
      loadBalancerIP: null
      type: ClusterIP
  networkPolicy:
    allowExternal: true
    enabled: false
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    mountPath: /bitnami/postgresql
    size: 8Gi
  postgresqlUsername: postgres
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replication:
    applicationName: my_application
    enabled: false
    numSynchronousReplicas: 0
    password: repl_password
    slaveReplicas: 1
    synchronousCommit: "off"
    user: repl_user
  resources:
    requests:
      cpu: 250m
      memory: 256Mi
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  service:
    annotations: {}
    port: 5432
    type: ClusterIP
  slave:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  updateStrategy:
    type: RollingUpdate
  volumePermissions:
    enabled: true
    image:
      pullPolicy: Always
      registry: docker.io
      repository: bitnami/minideb
      tag: latest
    securityContext:
      runAsUser: 0

HOOKS:
---
# am-api-pr-11-test-service
apiVersion: v1
kind: Pod
metadata:
  name: "am-api-pr-11-test-service"
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
  - name: am-api-pr-11-test-service
    image: busybox
    env:
      - name: SERVICE_NAME
        value: am-api-pr-11
    command: ["sh", "-c", "httpstatuscode=$(wget -S http://$SERVICE_NAME/health 2>&1 | grep HTTP/ | awk 'END{print $2}') && [ \"$httpstatuscode\" = \"200\" ]"]
  restartPolicy: Never
MANIFEST:

---
# Source: am-api/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: am-api-pr-11-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.9.5
    release: "am-api-pr-11"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: "dzVPUVVETWN3Nw=="
---
# Source: am-api/charts/am-api/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: am-api-pr-11
  labels:
    app.kubernetes.io/name: am-api-pr-11
    helm.sh/chart: am-api-0.0.9
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: am-api-pr-11
data:
---
# Source: am-api/charts/am-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: am-api-pr-11
  labels:
    app.kubernetes.io/name: am-api-pr-11
    helm.sh/chart: am-api-0.0.9
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: am-api-pr-11
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 2703
  selector:
    app.kubernetes.io/name: am-api-pr-11
---
# Source: am-api/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: am-api-pr-11-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-3.9.5
    release: "am-api-pr-11"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "am-api-pr-11"
---
# Source: am-api/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: am-api-pr-11-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.9.5
    release: "am-api-pr-11"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "am-api-pr-11"
    role: master
---
# Source: am-api/charts/am-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: am-api-pr-11
  labels:
    app.kubernetes.io/name: am-api-pr-11
    helm.sh/chart: am-api-0.0.9
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: am-api-pr-11
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: am-api-pr-11
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: am-api-pr-11
    spec:
      containers:
      - image: hmcts.azurecr.io/hmcts/am-api@sha256:5d1580b6115289de6834a81cd3ae482be06a87e6895f1492f3078c43f4ecb446
        name: am-api-pr-11
        resources:
          requests:
            memory: 512Mi
            cpu: 100m
          limits:
            memory: 1024Mi
            cpu: 2500m
        ports:
        - containerPort: 2703
          name: http
        livenessProbe:
          httpGet:
            path: /health
            port: 2703
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 2703
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
        imagePullPolicy: IfNotPresent
---
# Source: am-api/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: am-api-pr-11-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.9.5
    release: "am-api-pr-11"
    heritage: "Tiller"
spec:
  serviceName: am-api-pr-11-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "am-api-pr-11"
      role: master
  template:
    metadata:
      name: am-api-pr-11-postgresql
      labels:
        app: postgresql
        chart: postgresql-3.9.5
        release: "am-api-pr-11"
        heritage: "Tiller"
        role: master
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        command:
          - sh
          - -c
          - |
            chown -R 1001:1001 /bitnami
            if [ -d /bitnami/postgresql/data ]; then
              chmod  0700 /bitnami/postgresql/data;
            fi
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
      containers:
      - name: am-api-pr-11-postgresql
        image: docker.io/bitnami/postgresql:10.6.0
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        env:
        - name: POSTGRESQL_USERNAME
          value: "postgres"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: am-api-pr-11-postgresql
              key: postgresql-password
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "postgres" -h localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "postgres" -h localhost
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: am-api/charts/am-api/templates/ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: am-api-pr-11
  labels:
    app.kubernetes.io/name: am-api-pr-11
    helm.sh/chart: am-api-0.0.9
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/instance: am-api-pr-11
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: am-api-pr-11.service.core-compute-preview.internal
    http:
      paths:
      - path: /
        backend:
          serviceName: am-api-pr-11
          servicePort: 80
